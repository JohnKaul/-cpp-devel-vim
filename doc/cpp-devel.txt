*cpp-devel.txt*
Last Updated: 04.06.16 10:59:53 AM

==============================================================================
CONTENTS                                                  *cpp-devel-contents*

    1.Intro........................................................|cpp-devel|
    2.Functionality provided.........................|cpp-devel-Functionality|
        2.1 Global mappings.........................|cpp-devel-GLobalMappings|
                2.1.1 Insert mode mappings................|cpp-devel-inoremap|
                2.1.2 Normal and Visual mapings................|cpp-devel-map|
                2.1.3 Normal mappings.........................|cpp-devel-nmap|
        2.2 Global commands.........................|cpp-devel-GlobalCommands|
        2.3 Global functions........................|cpp-devel-GlobalFuctions|
        2.4 Local fucntions.........................|cpp-devel-LocalFunctions|




===-----------------------------------X------------------------------------===
1. Intro                                                           *cpp-devel*

This plugin will help preform many useful functions to help write
C/C++ code.

The main goal of this plugin was to offer me a painless method to keep
a projects tags file up-to-date and give me the ability to use the
built in |:make| command to build my "out-of-source-build projects".
This plugin looks for a "build" directory and assumes that it is at
the project root.

Indent style is big, and usually very personal, topic and this plugin
does offer to help enforce some basic rules related to style. However,
coding style isn't this plugins main goal (it is offered as an added
feature) so it can be turned off or tailored to suite your needs.

By defauly this plugin helps write code that is mostly K&R style code
(think: braces on the same line) and with very little effort it can be
made to conform to a different style. There are many, many different
indent styles--K&R, BSD, Allman, etc--and many different style guides
and this plugin certainly isn't intended to replace those and it
certainly will not reformat existing code so, if you do not already
have a preferred coding style, I hope the style aspect of this plugin
helps you. 



===-----------------------------------X------------------------------------===
2. Functionality provided                            *cpp-devel-Functionality*

o  Automatic brace and parenthesis addition.
      ~ Intelligence added to place braces on same line as if,while,do,etc.
o  Automatic space between keyword and paren addition.
      ~ For the keywords: if/for/while/switch/foreach/forever add a space
        between it and it's paren
o  Quick switching between header and impl file.
o  Intelligent includes additions.
      ~ EG: Automatic "#include <string.h>" statement when cursor is on
            "std::string" statement.
o  Ability to add "standard" comment headers.
o  Changelog and TODO log entry helpers.
o  Comment and Uncomment line(s) toggle
      ~ works with visual selection as well.
o  Intelligent directory searching to enable "out-of-source-building", like
   in the use of CMAKE.
o  Generic tab completion for braces, parenthesis and quotes.
      ~ This feature is only meant for convinces, please use a mechanism
        like "SnipMate" for better tab completion.
o  Ability to align assignments in surrounding statements.



===-----------------------------------X------------------------------------===
2.1  Global Mappings                                 *cpp-devel-GlobalMappings*

2.1.1   Insert mode mappings                               *cpp-devel-inoremap*

        <F5>........................................................|AddHeader|
        <S-F5>.....................................................|AddForward|

2.1.2   Normal and Visual mode mappings                         *cpp-devel-map*

        <C-Bslash>................................................|CommentLine|

2.1.3   Normal mode mappings                                    *cpp-devel-map*

        ,h...................................................|SwitchHeaderImpl|
        ,p............................................|SwitchPrivateHeaderImpl|
        ,#.......................................................|IncludeGuard|
        ;=...................................................|AlignAssignments|
        ,lg.....................................................|LicenseHeader|
        ,ll.....................................................|LicenseHeader|
        ,lm.....................................................|LicenseHeader|
        ,lb.....................................................|LicenseHeader|



===-----------------------------------X------------------------------------===
2.2  Global Commands                                *cpp-devel-GlobalCommands*
The following commands can be called from the Vim command line.

------------------------------------------------------------------------------
:make                                                                   *make*
        An override to the built in make command.

        This is essentially a small `wrapper' or `convenience extension' to
        the built in |:make| command. This function will store the current
        working directory, switch that working directory to the location of
        the makefile, issue the |:make| command, and change the current
        working directory back.

See also |Directory_matcher|

------------------------------------------------------------------------------
:MakeCtags                                                         *MakeCtags*
        A function to create a |tags| file in the project root.



===-----------------------------------X------------------------------------===
2.3  Global Functions                              *cpp-devel-GlobalFunctions*

------------------------------------------------------------------------------
SetCppCodingStyle()                                           *SetCodingStyle*
        This procedure enables settings based on the syntax settings
        for the current file.

------------------------------------------------------------------------------
DisableSmartLineBreak()                                *DisableSmartLineBreak*

------------------------------------------------------------------------------
EnableSmartLineBreak()                                  *EnableSmartLineBreak*

------------------------------------------------------------------------------
SmartElse()                                                        *SmartElse*

------------------------------------------------------------------------------
AddClosingBrace(current_line)                                *AddClosingBrace*

------------------------------------------------------------------------------
AddClosingChar(current_line, ch)                              *AddClosingChar*

------------------------------------------------------------------------------
SmartLineBreak()                                              *SmartLineBreak*

------------------------------------------------------------------------------
SmartParensOn()                                                *SmartParensOn*

------------------------------------------------------------------------------
SmartParensOff()                                              *SmartParensOff*

------------------------------------------------------------------------------
SmartTab()                                                         *SmartTabs*

------------------------------------------------------------------------------
SmartParens( char, ... )                                         *SmartParens*
        Adds the space before the '(' after the keywords if/for/while/switch.

------------------------------------------------------------------------------
SpaceBetweenKeywordAndParens()                  *SpaceBetweenKeywordAndParens*
        This function will add a space after the paren for the
        following fuctions:
                if, for, while, switch, foreach, forever
        Example: >
        if (test) ...
        for (test) ...
        ...
<
------------------------------------------------------------------------------
SwitchHeaderImp()                                           *SwitchHeaderImpl*
        Switch between a header and implementation file.
        
        The current shortcut follows the |gf| mnemonic "goto file". 

        To remap: >
        :nmap <silent> Gf :call SwitchHeaderImpl()<CR>
<
------------------------------------------------------------------------------
SwitchPrivateHeaderImpl()                           *SwitchPrivateHeaderImpl*
        Switch between a private header and implementation file.

        The current shortcut follows the |gf| mnemonic "goto file". 

        Given the example:
        MyClass_p.h >
                        // Header Guard Here
                        class MyClassPrivate
                        {
                        public:
                            int a;
                            bool b;
                            //more data members;
                        }
<
        MyClass.h >
                        // Header Guard Here
                        class MyClassPrivate;
                        class MyClass
                        {
                        public:
                            MyClass();
                            ~MyClass();
                            void method1();
                            int method2();
                        private:
                            MyClassPrivate* mData;
                        }
<
        
        MyClass.cpp >
                        #include "MyClass.h"
                        #include "MyClass_p.h"
                        
                        MyClass::MyClass()
                        {
                            mData = new MyClassPrivate();
                        }
                        
                        MyClass::~MyClass()
                        {
                            delete mData;
                        }
                        
                        void MyClass::method1()
                        {
                            //do stuff
                        }
                        
                        int MyClass::method2()
                        {
                            return stuff;
                        }
<
        
        To remap: >
        :nmap <silent> GF :call SwitchPrivateHeaderImpl()<CR>
<

See also |s:CreatePrivateHeader|

------------------------------------------------------------------------------
AddHeader()                                                        *AddHeader*
        Insert an #include statement for the current/last symbol.

        Example:
        With cursor on "std::string" and <F5> pressed, the satement
        "#include <string.h>" will be added to the file.

        This function calls the *MapIdentHeader*' function to add an
        include statement to the top of the file.

        To remap: >
        :inoremap <F5> <C-O>:call AddHeader()<CR>
<
------------------------------------------------------------------------------
AddForward()                                                      *AddForward*
        This function will add a forward decl for the class the current
        cursor is on.

        To remap: >
        :inoremap <S-F5> <C-O>:call AddForward()<CR>
<
------------------------------------------------------------------------------
IncludeGuard()                                                  *IncludeGuard*
        Adds a forward declaration.

        To remap: >
        :nmap ,# :call IncludeGuard()<CR>
<
------------------------------------------------------------------------------
SmartInclude()                                                  *SmartInclude*
        Expand #i to #include <.h> or #include ".h". The latter is
        chosen if the character typed after #i is a dquote If the
        character is > #include <> is inserted (standard C++ headers
        w/o .h)

------------------------------------------------------------------------------
LicensHeader( license )                                        *LicenseHeader*

To make use of the ,ll ,lg, ,lm, and ,lb shortcuts you need to have
the files GPLHEADER, LGPLHEADER, MITHEADER, and BSDHEADER in your home
directory. Their content will be copied as license header then.

------------------------------------------------------------------------------
CreateChangeLogEntry()                                  *CreateChangeLogEntry*
        Create a changelog entry. This function will split-open the
        changelog file and start an entry for you.

See also |CreateTODOEntry|

------------------------------------------------------------------------------
CreateTODOEntry()                                            *CreateTODOEntry*
        Create a TODO entry. This function will split-open the
        TODO file and start an entry for you.

See also |CreateChangeLogEntry|

------------------------------------------------------------------------------
AlignAssignments()                                          *AlignAssignments*

        This function will align the assignments for the statements in
        a code block.

        Example: >
                applicants_name = 'Luke'
                mothers_maiden_name = 'Amidala'
                closest_relative = 'sister'
                fathers_occupation = 'Sith'
         ...will become...
                applicants_name     = 'Luke'
                mothers_maiden_name = 'Amidala'
                closest_relative    = 'sister'
                fathers_occupation  = 'Sith'
<

        Code for this function found here:
        http://www.ibm.com/developerworks/linux/library/l-vim-script-2/index.html

------------------------------------------------------------------------------
CommentLine()                                                    *CommentLine*
        Adds or removes a comment on lines (works with visual
        selection).

        To remap: >
        " Toggle line comments on Ctrl+\
        map <C-Bslash> :call CommentLine()<LF>
<
------------------------------------------------------------------------------
CommentBlock()                                                  *CommentBlock*
        Adds a standard comment block; this function is ment to be
        extended to offer a company/project/personal comment block
        style.

        This function will also prompt for a comment string.

        Example: >
                // ======================================
                // comment
                // ======================================
<

        To remap: >
        " Project or standard C++ comment block
        imap <silent>  ///  <C-R>=CommentBlock(input("Enter comment: "), {'box':'=', 'width':73})<CR>
<


===-----------------------------------X------------------------------------===
2.4 Local Functions                                 *cpp-devel-LocalFunctions*
These functions are internal only (not callable from the command
line).

------------------------------------------------------------------------------
s:CreateMatchLine()                                        *s:CreateMatchLine*
        Finds the line in wich to place the matching brace/paren/bracket.

------------------------------------------------------------------------------
s:AskToSave()                                                    *s:AskToSave*
        Asks to save a file.

------------------------------------------------------------------------------
s:ClassNameFromHeader()                                *s:ClassNameFromHeader*

------------------------------------------------------------------------------
s:ClassNameFromImpl()                                    *s:ClassNameFromImpl*

------------------------------------------------------------------------------
s:MapIdentHeader()                                          *s:MapIdentHeader*
        This function basically maps some functions to their headers.

        e.g. It knows that std::string needs the <string.h> file and

------------------------------------------------------------------------------
s:CreatePrivateHeader( privateHeader )                 *s:CreatePrivateHeader*
        Creates a private header file.
        
        NOTE: 1. When you are in the header file, cursor must be on the first
                 line of the class.
        
                        Ex: >
                          class MyClass      <--- Cursor Must be on this line
                          {
                              ...
<
               2. No header guard or private decl is made in the
                  header file.

See also |SwitchPrivateHeaderImpl|

------------------------------------------------------------------------------
AddHeader()                                                        *AddHeader*
Directory_matcher()                                        *Directory_matcher*
        This function will search up and down directories from the
        current files location to look for a list of different
        folders. Namey, bin, build, debug, release, etc. to ultimalty
        locate the makefile within. This is to enable
        "out-of-source-builds" like when using CMAKE to build a
        project. All this leads to the simple act of being able to use
        `make' for out-of-source-builds from within Vim.

------------------------------------------------------------------------------
SmartComplete()                                                *SmartComplete*
