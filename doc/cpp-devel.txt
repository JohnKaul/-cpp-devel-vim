*cpp-devel.txt*
Last Updated: 03.30.16 2:55:54 PM

==============================================================================
CONTENTS                                                  *cpp-devel-contents*

    1.Intro...................................|cpp-devel|
    2.Functionality provided..................|cpp-devel-Functionality|
        2.1 Global commands...................|cpp-devl-GlobalCommands|
        2.2 Global functions..................|cpp-devel-GlobalFunctions|
        2.3 Local functions...................|cpp-devel-LocalFunctions|

==============================================================================
1. Intro                                                           *cpp-devel*

What is the "cpp-devel" plugin? This plugin will help preform many
"necessary" and/or "usefull" functions to help write C++ code.

==============================================================================
2. Functionality provided                            *cpp-devel-Functionality*

o  Automatic brace and parenthesis addition.
      ~ Intelligence added to place braces on same line as if,while,do,etc.
o  Automatic space between keyword and paren addition.
o  Quick switching between header and impl file.
o  Intelligent includes additions.
      ~ EG: Automatic "#include <string.h>" statement when cursor is on
            "std::string" statement.
o  Ability to add "standard" (ment to be overridden for personal,project
   stds) comment headers.
o  Change and TODO log entry helpers.
o  (un)comment line toggle
      ~ works with visual selection as well.
o  Intelligent directory searching to enable "out-of-source-building", like
   in the use of CMAKE.
o  Generic tab completion for braces, parenthesis and quotes.
      ~ This feature is only meant for convinces, please use a mechanism
        like "SnipMate" for better tab completion.
o  Ability to align assignments in surrounding statements.

===-----------------------------------X------------------------------------===
2.1  Global Commands                                *cpp-devel-GlobalCommands*
:make                                                                   *make*


===-----------------------------------X------------------------------------===
2.2  Global Functions                              *cpp-devel-GlobalFunctions*

------------------------------------------------------------------------------
SetCppCodingStyle()                                           *SetCodingStyle*
        This procedure enables settings based on the syntax settings
        for the current file.

------------------------------------------------------------------------------
DisableSmartLineBreak()                                *DisableSmartLineBreak*

See also

------------------------------------------------------------------------------
EnableSmartLineBreak()                                  *EnableSmartLineBreak*

See also

------------------------------------------------------------------------------
SmartElse()                                                        *SmartElse*

See also

------------------------------------------------------------------------------
AddClosingBrace(current_line)                                *AddClosingBrace*

See also

------------------------------------------------------------------------------
AddClosingChar(current_line, ch)                              *AddClosingChar*

See also

------------------------------------------------------------------------------
SmartLineBreak()                                              *SmartLineBreak*

See also

------------------------------------------------------------------------------
SmartParensOn()                                                *SmartParensOn*

See also

------------------------------------------------------------------------------
SmartParensOff()                                              *SmartParensOff*

See also

------------------------------------------------------------------------------
SmartTab()                                                         *SmartTabs*

See also

------------------------------------------------------------------------------
AddHeader()                                                       *:AddHeader*
        Insert an #include statement for the current/last symbol.

        Example:
        With cursor on "std::string" and <F5> pressed, the satement
        "#include <string.h>" will be added to the file.

        This function calls the *MapIdentHeader*' function to add an
        include statement to the top of the file.

        To remap: >
        :inoremap <F5> <C-O>:call AddHeader()<CR>
<
See also

------------------------------------------------------------------------------
AddForward()                                                     *:AddForward*
        This fuction will add a forward decl for the class the current
        currser is on.

        To remap: >
        :inoremap <S-F5> <C-O>:call AddForward()<CR>
<
See also


------------------------------------------------------------------------------
SwitchHeaderImp()                                           *:SwitchHeaderImp*
        Switch between a header and implementation file.

        To remap: >
        :nmap <silent> ,h :call SwitchHeaderImpl()<CR>
<
See also


------------------------------------------------------------------------------
SwitchPrivateHeaderImpl()                           *:SwitchPrivateHeaderImpl*
        Switch between a private header and implementation file.

        To remap: >
        :nmap <silent> ,p :call SwitchPrivateHeaderImpl()<CR>
<
See also


------------------------------------------------------------------------------
IncludeGuard()                                                 *:IncludeGuard*
        Adds a forward declaration.

        To remap: >
        :nmap ,# :call IncludeGuard()<CR>
<
See also


------------------------------------------------------------------------------
SmartInclude()                                                  *SmartInclude*
        Expand #i to #include <.h> or #include ".h". The latter is
        chosen if the character typed after #i is a dquote If the
        character is > #include <> is inserted (standard C++ headers
        w/o .h)

------------------------------------------------------------------------------
LicensHeader( license )                                        *LicenseHeader*


------------------------------------------------------------------------------
CreateChangeLogEntry()                                  *CreateChangeLogEntry*
        Create a changelog entry. This function will split-open the
        changelog file and start an entry for you.

See also *CreateTODOEntry*


------------------------------------------------------------------------------
CreateTODOEntry()                                            *CreateTODOEntry*
        Create a TODO entry. This function will split-open the
        TODO file and start an entry for you.

See also *CreateChangeLogEntry*


------------------------------------------------------------------------------
AlignAssignments()                                         *AlightAssignments*

        This function will align the assignments for the statements in
        a code block.

        Example: >
                applicants_name = 'Luke'
                mothers_maiden_name = 'Amidala'
                closest_relative = 'sister'
                fathers_occupation = 'Sith'
         ...will become...
                applicants_name     = 'Luke'
                mothers_maiden_name = 'Amidala'
                closest_relative    = 'sister'
                fathers_occupation  = 'Sith'
<

        Code for this function found here:
        http://www.ibm.com/developerworks/linux/library/l-vim-script-2/index.html

See also


------------------------------------------------------------------------------
CommentLine()                                                    *CommentLine*
        Adds or removes a comment on lines (works with visual
        selection).

        To remap: >
                " Toggle line comments on Ctrl+\
                map <C-Bslash> :call CommentLine()<LF>
<

See also


------------------------------------------------------------------------------
CommentBlock()                                                  *CommentBlock*
        Adds a standard comment block; this function is ment to be
        extended to offer a company/project/personal comment block
        style.

        This function will also prompt for a comment string.

        Example: >
                /// =========================================================================
                /// comment
                /// \brief:
                ///
                /// =========================================================================
<

        To remap: >
                " Project or standard C++ comment block
                imap <silent>  ///  <C-R>=CommentBlock(input("Enter comment: "), {'box':'=', 'width':73})<CR>
<

See also

===-----------------------------------X------------------------------------===
2.2. Local Functions                                  *cpp-devel-LocalFunctions*

CreateMatchLine()                                            *CreateMatchLine*
SmartParens( char, ... )                                         *SmartParens*
SpaceBetweenKeywordAndParens()                  *SpaceBetweenKeywordAndParens*
        This function will add a space after the paren for the
        following fuctions:
                if, for, while, switch, foreach, forever
AskToSave()                                                        *AskToSave*
CreatePrivateHeader( privateHeader )                     *CreatePrivateHeader*
ClassNameFromHeader()                                    *ClassNameFromHeader*
ClassNameFromImpl()                                        *ClassNameFromImpl*
RunDiff()                                                            *RunDiff*
        Not used.
AddQtSyntax()                                                    *AddQtSyntax*
        Not used.
UpdateMocFiles()                                              *UpdateMocFiles*
        Not used.
MapIdentHeader()                                              *MapIdentHeader*
        This function basicaly maps some functions to their headers.

        e.g. It knows that std::string needs the <string.h> file and
AddHeader()                                                        *AddHeader*
Directory_matcher()                                        *Directory_matcher*
        This function will search up and down directories from the
        current files location to look for a list of different
        folders. Namey, bin, build, debug, release, etc. to ultimalty
        locate the makefile within. This is to enable
        "out-of-source-builds" like when using CMAKE to build a
        project. All this leads to the simple act of being able to use
        `make' for out-of-source-builds from within Vim.
        
SmartComplete()                                            *SmartComplete*
