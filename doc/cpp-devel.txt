*cpp-devel.txt*
Last Updated: 03.30.16 2:55:54 PM

==============================================================================
CONTENTS                                                  *cpp-devel-contents*

    1.Intro...................................|cpp-devel|
    2.Functionality provided..................|cpp-devel-Functionality|
        2.1.Global commands...................|cpp-devel-GlobalCommands|
        2.2 Local command.....................|cpp-devel-LocalCommands|

==============================================================================
1. Intro                                                           *cpp-devel*

What is the "cpp-devel" plugin?


==============================================================================
2. Functionality provided                            *cpp-devel-Functionality*

------------------------------------------------------------------------------
2.1. Global Commands                                *cpp-devel-GlobalCommands*

:DisableSmartLineBreak()                               *DisableSmartLineBreak*
:EnableSmartLineBreak()                                 *EnableSmartLineBreak*

:SmartParensOff()                                             *SmartParensOff*

:AddHeader()                                                      *:AddHeader*
        Insert an #include statement for the current/last symbol
        To remap: >
        :inoremap <F5> <C-O>:call AddHeader()<CR>
<
See also


:AddForward()                                                    *:AddForward*
        Insert a forward declaration for the current/last symbol

        To remap: >
        :inoremap <S-F5> <C-O>:call AddForward()<CR>
<
See also


:SwitchHeaderImp()                                          *:SwitchHeaderImp*
        Switch between a header and implementation file.

        To remap: >
        :nmap <silent> ,h :call SwitchHeaderImpl()<CR>
<
See also


:SwitchPrivateHeaderImpl()                          *:SwitchPrivateHeaderImpl*
        Switch between a private header and implementation file.

        To remap: >
        :nmap <silent> ,p :call SwitchPrivateHeaderImpl()<CR>
<
See also


:IncludeGuard()                                                *:IncludeGuard*

        To remap: >
        :nmap ,# :call IncludeGuard()<CR>
<
See also


:SmartInclude()                                                 *SmartInclude*
        Expand #i to #include <.h> or #include ".h". The latter is
        chosen if the character typed after #i is a dquote If the
        character is > #include <> is inserted (standard C++ headers
        w/o .h)

:Licenseeader( license )                                      *LicenseHeader*


:CreateChangeLogEntry()                                 *CreateChangeLogEntry*
        Create a changelog entry. This function will split-open the
        changelog file and start an entry for you.
See also *CreateTODOEntry*


:CreateTODOEntry()                                          *CreateTODOEntry*
        Create a TODO entry. This function will split-open the
        TODO file and start an entry for you.
See also *CreateChangeLogEntry*

:AlignAssignments()                                        *AlightAssignments*

        This function will align the assignments for the statements in
        a code block.

        Example: >
                applicants_name = 'Luke'
                mothers_maiden_name = 'Amidala'
                closest_relative = 'sister'
                fathers_occupation = 'Sith'
                
                applicants_name     = 'Luke'
                mothers_maiden_name = 'Amidala'
                closest_relative    = 'sister'
                fathers_occupation  = 'Sith'
<

        Code for this function found here:
        http://www.ibm.com/developerworks/linux/library/l-vim-script-2/index.html

See also

:CommentLine()                                                   *CommentLine*
        Adds or removes a comment on lines (works with visual
        selection).

        To remap: >
                " Toggle line comments on Ctrl+\
                map <C-Bslash> :call CommentLine()<LF>
<

See also

CommentBlock()                                                  *CommentBlock*
        Adds a standard comment block; this function is ment to be
        extended to offer a company/project/personal comment block
        style.

        This function will also prompt for a comment string.

        Example: >
                /// =========================================================================
                /// comment
                /// \brief:
                ///
                /// =========================================================================
<

        To remap: >
                " Project or standard C++/Java/PHP comment block
                imap <silent>  ///  <C-R>=CommentBlock(input("Enter comment: "), {'box':'=', 'width':73})<CR>
<

See also

------------------------------------------------------------------------------
2.2. Local Commands                                  *cpp-devel-LocalCommands*

s:SetCppCodingStyle()                                       *s:SetCodingStyle*
        This procedure enables settings based on the syntax settings
        for the current file.

SmartElse()                                                        *SmartElse*
CreateMatchLine()                                            *CreateMatchLine*
AddClosingBrace(current_line)                                *AddClosingBrace*
SmartLineBreak()                                              *SmartLineBreak*
SmartParensOn()                                                *SmartParensOn*
SmartTab()                                                         *SmartTabs*
SmartParens( char, ... )                                         *SmartParens*
SpaceBetweenKeywordAndParens()                  *SpaceBwtweenKeywordAndParens*
        This function will add a space after the paren for the
        following fuctions:
                if, for, while, switch, foreach, forever
AskToSave()                                                        *AskToSave*
CreatePrivateHeader( privateHeader )                     *CreatePrivateHeader*
ClassNameFromHeader()                                    *ClassNameFromHeader*
ClassNameFromImpl()                                        *ClassNameFromImpl*
SmartInclude()                                                  *SmartInclude*
RunDiff()                                                            *RunDiff*
CreateChangeLogEntry()                                  *CreateChangeLogEntry*
AddQtSyntax()                                                    *AddQtSyntax*
UpdateMocFiles()                                              *UpdateMocFiles*
MapIdentHeader()                                              *MapIdentHeader*
        This function basicaly maps some functions to their headers.

        e.g. It knows that std::string needs the <string.h> file and
AddHeader()                                                        *AddHeader*
        This function calls the `MapIdentHeader()' function to add an
        include statement to the top of the file.
AddForward()                                                      *AddForward*
        This fuction will add a forward decl for the class the current
        currser is on.
RunDiff()                                                            *RunDiff*
AddQtSyntax()                                                    *AddQtSyntax*
Directory_matcher()                                        *Directory_matcher*
        This function will search up and down directories from the
        current files location to look for a list of different
        folders. Namey, bin, build, debug, release, etc. to ultimalty
        locate the makefile within. This is to enable
        "out-of-source-builds" like when using CMAKE to build a
        project. All this leads to the simple act of being able to use
        `make' for out-of-source-builds from within Vim.
        
SmartComplete()                                            *SmartComplete*
